#!/bin/bash
# whenup - connect to a computer when it is up
# Copyright 2022 Jeremy Wakeman
# SPDX-License-Identifier: GPL-3.0-or-later

bell=0
down=0
loop=0
wait=0
port=0
root=0
telnet=0
onlytry=0
options=0

# if help is requested, show usage and options
if [[ "$*" == "" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]] ; then
	exec_name=`basename $0`
	echo "Usage: $exec_name [OPTION] <server>"
	echo "connect to a server if it is up"
	echo ""
	echo "  -b,         bell when connecting"
	echo "  -h, --help  display this help and exit"
	echo "  -p [port]   check alternate port"
	echo "  -w          wait 30 seconds between ping and connect"
	echo "  -t          use telnet instead of ssh"
	echo ""
	echo "Examples:"
	echo "  $exec_name -brw 192.168.0.1   use bell and wait, ssh root@192.168.0.1"
	exit 0
fi

# if options are passed, parse them
if [[  $1 =~ - ]] ; then
	if [[ $1 =~ b ]] ; then
		bell=1
	fi
	if [[ $1 =~ d ]] ; then
		down=1
	fi
	if [[ $1 =~ l ]] ; then
		loop=1
	fi
	if [[ $1 =~ o ]] ; then
		onlytry=1
	fi
	if [[ $1 =~ w ]] ; then
		wait=1
	fi
	if [[ $1 =~ r ]] ; then
		root=1
	fi
	if [[ $1 =~ t ]] ; then
		telnet=1
	fi
	if [[ $1 =~ p ]] ; then
		port=$2
		shift
	fi
	shift
fi

# parse address or hostname to check
host=$1
shift

# if no command given, assume ssh the address or hostname
if [ "$*" == "" ] ; then
	if [ "$root" == "1" ] ; then
		if [ "$telnet" == "1" ] ; then
			echo "Error: -r option and -t option should not be used together"
			exit 1
		fi
		run="ssh root@$host"
		port=22
	elif [ "$telnet" == "1" ] ; then
		run="telnet $host"
		port=23
	else
		run="ssh $host"
		port=22
	fi
else
	if [ "$root" == "1" ] ; then
		echo "Error: -r option should not be used with an explicit command"
		exit 1
	elif [ "$telnet" == "1" ] ; then
		echo "Error: -t option should not be used with an explicit command"
		exit 1
	else
		run=$*
	fi
fi

# make sure IP is down first, if that option was selected
if [ "$down" == "1" ] ; then
	echo -n "Waiting for $host to be down "
	ipdown=0
	while [ "$ipdown" -eq "0" ] ; do
		echo -n ". "
		ping -w 2 $host > /dev/null || ipdown=1
		sleep 1
	done
	echo "done"
fi

# if we should wait, wait
if [ "$wait" == "1" ] ; then
	echo sleeping for 10 seconds . . .
	sleep 10
fi
# if we should bell, bell
if [ "$bell" == "1" ] ; then
	bell
fi

runonce=1
while [[ $loop -eq 1 ]] || [[ $runonce -eq 1 ]] ; do
	echo -n "Waiting for $host to be up "
	ipup=0
	numtries=0
	while [ "$ipup" -eq "0" ] ; do
		echo -n ". "
		if [[ $port -eq 0 ]] ; then
			ping -w 2 $host >/dev/null && ipup=1
		else
			nc -zw 2 $host $port 2>/dev/null && ipup=1
		fi
		sleep 1
		numtries=$(($numtries+1))
		if [ "$onlytry" -eq "1" ] && [ "$numtries" -ge "3" ] ; then
			echo "No response after three tries, quitting"
			exit 1
		fi
	done
	echo "done"
	# if we should wait, wait
	if [ "$wait" == "1" ] ; then
		echo sleeping for 15 seconds . . .
		sleep 15
	fi
	# if we should bell, bell
	if [ "$bell" == "1" ] ; then
		bell
	fi
	$run
	if [[ $loop -eq 1 ]] ; then
		echo sleeping for 15 seconds . . .
		sleep 15
	fi
	runonce=0
done
