#!/bin/bash
# a simple bash script to connect to a server when it is up
# Copyright 2022 Jeremy Wakeman
# SPDX-License-Identifier: GPL-3.0-or-later

BELL=0
DOWN=0
LOOP=0
WAIT=0
PORT=0
ROOT=0
TELNET=0
ONLYTRY=0

# if help is requested, show usage and options
if [[ "$*" == "" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]] ; then
	exec_name=`basename $0`
	echo "Usage: $exec_name [OPTION] <server>"
	echo "connect to a server if it is up"
	echo ""
	echo "  -b,         bell when connecting"
	echo "  -h, --help  display this help and exit"
	echo "  -p [port]   check alternate port"
	echo "  -w          wait 30 seconds between ping and connect"
	echo "  -t          use telnet instead of ssh"
	echo ""
	echo "Examples:"
	echo "  $exec_name -brw 192.168.0.1   use bell and wait, ssh root@192.168.0.1"
	exit 0
fi

# if options are passed, parse them
if [[  $1 =~ - ]] ; then
	if [[ $1 =~ b ]] ; then
		BELL=1
	fi
	if [[ $1 =~ d ]] ; then
		DOWN=1
	fi
	if [[ $1 =~ l ]] ; then
		LOOP=1
	fi
	if [[ $1 =~ o ]] ; then
		ONLYTRY=1
	fi
	if [[ $1 =~ w ]] ; then
		WAIT=1
	fi
	if [[ $1 =~ r ]] ; then
		ROOT=1
	fi
	if [[ $1 =~ t ]] ; then
		TELNET=1
	fi
	if [[ $1 =~ p ]] ; then
		PORT=$2
		shift
	fi
	shift
fi

# parse address or hostname to check
if [[ $1 =~ @ ]] ; then
    INPUT=$1
    HOST=`echo $1 | sed -e "s/^.*@//"`
    shift
else
    INPUT=$1
    HOST=$1
    shift
fi

# if no command given, assume ssh the address or hostname
if [[ "$*" == "" ]] ; then
	if [[ $ROOT -eq 1 ]] ; then
		if [[ $TELNET -eq 1 ]] ; then
			echo "Error: -r option and -t option should not be used together"
			exit 1
		fi
		RUN="ssh root@$HOST"
		PORT=22
	elif [[ $TELNET -eq 1 ]] ; then
		RUN="telnet $HOST"
		PORT=23
	else
		RUN="ssh $INPUT"
		PORT=22
	fi
else
	if [[ $ROOT -eq 1 ]] ; then
		echo "Error: -r option should not be used with an explicit command"
		exit 1
	elif [[ $TELNET -eq 1 ]] ; then
		echo "Error: -t option should not be used with an explicit command"
		exit 1
	else
		RUN=$*
	fi
fi

# make sure IP is down first, if that option was selected
if [[ $DOWN -eq 1 ]] ; then
	echo -n "Waiting for $HOST to be down "
	IPDOWN=0
	while [[ $IPDOWN -eq 0 ]] ; do
		echo -n ". "
		if [[ $PORT -eq 0 ]] ; then
			ping -w 2 $HOST >/dev/null || IPDOWN=1
		else
			nc -zw 2 $HOST $PORT 2>/dev/null || IPDOWN=1
		fi
		sleep 1
	done
	echo "done"
fi

# if we should wait, wait
if [[ $WAIT -eq 1 ]] ; then
	echo sleeping for 10 seconds . . .
	sleep 10
fi
# if we should bell, bell
if [[ $BELL -eq 1 ]] ; then
	bell
fi

RUNONCE=1
while [[ $LOOP -eq 1 ]] || [[ $RUNONCE -eq 1 ]] ; do
	echo -n "Waiting for $HOST to be up "
	IPUP=0
	NUMTRIES=0
	while [[ $IPUP -eq 0 ]] ; do
		echo -n ". "
		if [[ $PORT -eq 0 ]] ; then
			ping -w 2 $HOST >/dev/null && IPUP=1
		else
			nc -zw 2 $HOST $PORT 2>/dev/null && IPUP=1
		fi
		sleep 1
		NUMTRIES=$(($NUMTRIES+1))
		if [[ $ONLYTRY -eq 1 ]] && [[ $NUMTRIES -ge 3 ]] ; then
			echo "No response after three tries, quitting"
			exit 1
		fi
	done
	echo "done"
	# if we should wait, wait
	if [[ $WAIT -eq 1 ]] ; then
		echo sleeping for 15 seconds . . .
		sleep 15
	fi
	# if we should bell, bell
	if [[ $BELL -eq 1 ]] ; then
		bell
	fi
	$RUN
	if [[ $LOOP -eq 1 ]] ; then
		echo sleeping for 15 seconds . . .
		sleep 15
	fi
	RUNONCE=0
done
