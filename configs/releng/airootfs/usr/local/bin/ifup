#!/bin/bash
# a simple bash script to connect to a server if it is up
# written by Jeremy Wakeman
# SPDX-License-Identifier: GPL-3.0-or-later

bell=0
wait=0
port=0
root=0
telnet=0
options=0

# if help is requested, show usage and options
if [[ "$*"" == " ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]] ; then
	exec_name=`basename $0`
	echo "Usage: $exec_name [OPTION] <server>"
	echo "connect to a server if it is up"
	echo ""
	echo "  -b,         bell when connecting"
	echo "  -h, --help  display this help and exit"
	echo "  -p [port]   check alternate port"
	echo "  -w          wait 30 seconds between ping and connect"
	echo "  -t          use telnet instead of ssh"
	echo ""
	echo "Examples:"
	echo "  $exec_name -brw 192.168.0.1   use bell and wait, ssh root@192.168.0.1"
	exit 0
fi

# if options are passed, parse them
if [[  $1 =~ - ]] ; then
	if [[ $1 =~ b ]] ; then
		bell=1
	fi
	if [[ $1 =~ w ]] ; then
		wait=1
	fi
	if [[ $1 =~ r ]] ; then
		root=1
	fi
	if [[ $1 =~ t ]] ; then
		telnet=1
	fi
	if [[ $1 =~ p ]] ; then
		port=$2
		shift
	fi
	shift
fi

# parse address or hostname to check
host=$1
shift

# if no command given, assume ssh the address or hostname
if [ "$*" == "" ] ; then
	if [ "$root" == "1" ] ; then
		if [ "$telnet" == "1" ] ; then
			echo "Error: -r option and -t option should not be used together"
			exit 1
		fi
		run="ssh root@$host"
		port=22
	elif [ "$telnet" == "1" ] ; then
		run="telnet $host"
		port=23
	else
		run="ssh $host"
		port=22
	fi
else
	if [ "$root" == "1" ] ; then
		echo "Error: -r option should not be used with an explicit command"
		exit 1
	elif [ "$telnet" == "1" ] ; then
		echo "Error: -t option should not be used with an explicit command"
		exit 1
	else
		run=$*
	fi
fi

ipup=0
numtries=0
while [[ $ipup -eq 0 ]] ; do
	if [[ $port -eq 0 ]] ; then
		ping -w 2 $host && ipup=1
	else
		nc -zw 2 $host $port 2>/dev/null && ipup=1
	fi
	sleep 1
	numtries=$(($numtries+1))
	if [ "$numtries" -ge "3" ] ; then
		echo "No response after three tries, quitting"
		exit 1
	fi
done
# if we should wait, wait
if [ "$wait" == "1" ] ; then
	echo sleeping for 30 seconds . . .
	sleep 30
fi
# if we should bell, bell
if [ "$bell" == "1" ] ; then
	/usr/local/bin/bell
fi
$run
